import React, { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { getRandomPromt } from '../Utils'
import { FormField } from '../componenets'
import { useEffect } from 'react'
import Masonry from 'react-masonry-css'
import { Stack } from '@mui/system'
import Prevent from './Prevent'
import Navbar from '../componenets/Navbar'
import { useAuthContext } from '../Context/Authcontext'
import Loader from '../componenets/Loader'

const CreatePost = () => {
  const { user } = useAuthContext();
  const Navigate = useNavigate();
  const [img, setImg] = useState("");
  console.log(img)

  const [form, setForm] = useState({
    name: '',
    prompt: `${img}`,
    photo: '',
  });
  console.log(form.prompt)
  const { photo } = form;
  const [loading, setLoading] = useState(false);
  const [genrateImg, setGenrateImg] = useState(false);


  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value })

  }
  const handleSurprise = (e) => {
    const random = getRandomPromt(form.prompt)
    setForm({ prompt: random })
  }
  const Submit = () => {
    fetchRequest();
  
  };


  const fetchRequest = async () => {
    if (form.prompt) {
      try {
        setGenrateImg(true);


        const response = await fetch(
          `https://api.unsplash.com/search/photos?page=1&query=${form.prompt}&client_id=${'O7n4Wn0ebGb8oYDymHnZzVddK89qSNYEPH_qx_SefJ0'}&per_page=20`
        );
        const randomIndex = Math.floor(Math.random() * 10);
        const dataJ = await response.json();

        const result = dataJ.results[randomIndex]?.urls?.small;
        console.log(result)

        if (response.ok) {

          setForm({ ...form, photo: `${result}`,  });
        } else {
          throw new Error('Failewwd to fetch the image.');
        }
      } catch (err) {
        alert(err.message || 'Failed to fetch the imagee.');

      }
    } else {
      alert('Please provide proper prompswt');
    }
  };


  const handleImageLoad = () => {
    setGenrateImg(false);
  };


  const handleSubmit = async (e) => {
    e.preventDefault();

    if (form.prompt && form.photo && form.name) {
      setLoading(true);
      try {
        const response = await fetch('https://shiny-plum-pelican.cyclic.app/api/posts', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ ...form }),

        });

        await response.json();
        alert('Success');
        Navigate('/');
        window.location.reload();
      } catch (err) {
        alert(err);
      } finally {
        setLoading(false);
      }
    } else {

    }
  };



  return (
    <>
      <div style={{ backgroundColor: '#1C2021', height: '100vh' }}>        {
        user ? (
          <>
            <Navbar />
            <Stack direction={'row-reverse'} sx={{ backgroundColor: '#15191A' }} flexWrap={'wrap-reverse'} alignItems={'center'}>
              <Stack flexGrow={1} sx={{ backgroundColor: '#2A2B2F', height: '100%' }} p={2}>
                <div className='headertext'>
                  <h1> Create</h1>
                  <p>Create Imaginativeand visual Stunning Images <br />
                    Generated by DEV-E AI and Share them to Community.</p>
                </div>

                <form onSubmit={handleSubmit}>
                  <Stack direction={'column'}  >

{     form.prompt && form.photo &&         <FormField sx={{ backgroundColor: 'red' }} placeholder="Enter user Name" type='text' name='name' variant="outlined" value={form.name} handleChange={handleChange} />
}

                    <br />
                    <br />
                    <FormField LableName="Prompt:" placeholder=" a cute tropical fish " type='text' name='prompt' value={form.prompt} handleChange={handleChange} isSurpriseMe handleSurprise={handleSurprise} />


                  </Stack>


                  <div style={{ padding: '10px 0' }}>


                    <button type='button' className='but' style={{ padding: '12px 130px' }} onClick={Submit}>{genrateImg ? <h3>Generating!</h3> : <h3>Generate</h3>}</button>
                  </div>

                  <p style={{ padding: '0.5rem', color: 'white', fontSize: '1.6rem' }}>
                    Once you created the Image You Want , <br /> You can share it with Others in the Dev-Community.
                  </p>

                  <div>
                    <button style={{ padding: '12px 85px' }} className='but' type='submit'>{loading ? <h3>Posting in process...</h3> : <h3>Post to DEV-Community </h3>}</button>
                  </div>
                  <br /><br />

                  <p style={{ padding: '0.5rem', color: 'white', fontSize: '1.6rem' }}>
                    Created By <span style={{ color: 'cyan' }}> Devesh Bisht :)</span>
                  </p>

                </form>


              </Stack>

              <Stack flexGrow={9} sx={{ backgroundColor: '#15191A', position: 'relative' }}>
                {form.photo ? (
                  <>
                    <Stack>
                      <div style={{ display: 'flex' }}><img src={photo} alt={form.prompt} className='createpostimg' onLoad={handleImageLoad} loading='lazy' />
                      </div>
                      <div>
                        {genrateImg && (
                          <div className='loadstate' >
                            <Loader />
                          </div>
                        )}
                      </div>

                    </Stack>

                  </>
                ) : (<>
                  <img style={{ width: '320px', margin: '13% auto' }} src="https://static.fotor.com/app/features/static/media/ai-image-no-task.861133f7.jpg" alt="" />
                  {genrateImg && (
                    <div className='loadstate' >
                      <Loader />
                    </div>
                  )}
                </>
                )}

              </Stack>


            </Stack>
          </>
        ) : <Prevent />
      }



      </div>


    </>
  )
}

export default CreatePost